// Fix script for recipient statistics display issue
require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function fixRecipientStatistics() {
  console.log('üîß Fixing Recipient Statistics Display Issue')
  console.log('============================================\n')

  try {
    // Step 1: Get the campaign with incorrect statistics
    console.log('üìã Step 1: Getting the campaign with incorrect statistics...')
    
    const { data: campaign, error: campaignError } = await supabase
      .from('sms_bulk_campaigns')
      .select('*')
      .eq('id', '36262197-8e46-4c86-8b42-f3f8f8515350')
      .single()

    if (campaignError) {
      console.log('‚ùå Error fetching campaign:', campaignError)
      return
    }

    console.log(`‚úÖ Campaign found: ${campaign.campaign_name}`)
    console.log(`   Status: ${campaign.status}`)
    console.log(`   Recipient List: ${JSON.stringify(campaign.recipient_list)}`)
    console.log(`   Total Recipients: ${campaign.total_recipients}`)
    console.log(`   Delivered Count: ${campaign.delivered_count}`)
    console.log(`   Failed Count: ${campaign.failed_count}`)
    console.log(`   Sent Count: ${campaign.sent_count}`)

    // Step 2: Analyze the SMS notifications for this specific campaign
    console.log(`\nüìã Step 2: Analyzing SMS notifications for this specific campaign...`)
    
    const { data: notifications, error: notifError } = await supabase
      .from('sms_notifications')
      .select('*')
      .eq('bulk_campaign_id', campaign.id) // Only notifications linked to this campaign
      .order('created_at', { ascending: false })

    if (notifError) {
      console.log(`‚ùå Error fetching notifications:`, notifError)
      return
    }

    console.log(`üì± Found ${notifications?.length || 0} notifications linked to this campaign`)

    if (notifications && notifications.length > 0) {
      console.log(`üìä Campaign-Specific Notification Analysis:`)
      
      const sentCount = notifications.filter(n => n.status === 'sent').length
      const failedCount = notifications.filter(n => n.status === 'failed').length
      const pendingCount = notifications.filter(n => n.status === 'pending').length
      
      console.log(`   Sent: ${sentCount}`)
      console.log(`   Failed: ${failedCount}`)
      console.log(`   Pending: ${pendingCount}`)
      
      // Show unique recipients
      const uniqueRecipients = [...new Set(notifications.map(n => n.recipient_phone))]
      console.log(`   Unique Recipients: ${uniqueRecipients.length}`)
      console.log(`   Unique Recipient List: ${JSON.stringify(uniqueRecipients)}`)
      
      // Show all notifications for this campaign
      notifications.forEach((notif, index) => {
        console.log(`\n   üì± Notification ${index + 1}:`)
        console.log(`      Phone: ${notif.recipient_phone}`)
        console.log(`      Status: ${notif.status}`)
        console.log(`      Message: ${notif.message_content?.substring(0, 50)}...`)
        console.log(`      Reference: ${notif.damza_reference || 'None'}`)
        console.log(`      Created: ${notif.created_at}`)
        console.log(`      Campaign ID: ${notif.bulk_campaign_id}`)
      })

      // Step 3: Check if there are duplicate notifications
      console.log(`\nüìã Step 3: Checking for duplicate notifications...`)
      
      const phoneCounts = {}
      notifications.forEach(notif => {
        phoneCounts[notif.recipient_phone] = (phoneCounts[notif.recipient_phone] || 0) + 1
      })
      
      console.log(`üìä SMS Count per Phone Number:`)
      Object.entries(phoneCounts).forEach(([phone, count]) => {
        console.log(`   ${phone}: ${count} SMS`)
      })
      
      // Step 4: Fix the campaign statistics
      console.log(`\nüìã Step 4: Fixing campaign statistics...`)
      
      // The correct statistics should be:
      // - Total Recipients: Number of unique phone numbers in recipient_list
      // - Delivered Count: Number of unique recipients who received SMS successfully
      // - Sent Count: Number of unique recipients who were sent SMS
      // - Failed Count: Number of unique recipients who failed to receive SMS
      
      const correctTotalRecipients = campaign.recipient_list?.length || 0
      const correctDeliveredCount = uniqueRecipients.filter(phone => 
        notifications.some(n => n.recipient_phone === phone && n.status === 'sent')
      ).length
      const correctSentCount = uniqueRecipients.length
      const correctFailedCount = uniqueRecipients.filter(phone => 
        notifications.some(n => n.recipient_phone === phone && n.status === 'failed')
      ).length
      
      console.log(`üìä Corrected Statistics:`)
      console.log(`   Total Recipients: ${correctTotalRecipients}`)
      console.log(`   Delivered Count: ${correctDeliveredCount}`)
      console.log(`   Sent Count: ${correctSentCount}`)
      console.log(`   Failed Count: ${correctFailedCount}`)
      
      // Update the campaign with correct statistics
      const { data: updatedCampaign, error: updateError } = await supabase
        .from('sms_bulk_campaigns')
        .update({
          total_recipients: correctTotalRecipients,
          delivered_count: correctDeliveredCount,
          sent_count: correctSentCount,
          failed_count: correctFailedCount,
          total_cost: correctDeliveredCount * 1 // 1 KES per SMS
        })
        .eq('id', campaign.id)
        .select()
        .single()

      if (updateError) {
        console.log(`‚ùå Error updating campaign:`, updateError)
      } else {
        console.log(`‚úÖ Campaign statistics updated successfully:`)
        console.log(`   Total Recipients: ${updatedCampaign.total_recipients}`)
        console.log(`   Delivered Count: ${updatedCampaign.delivered_count}`)
        console.log(`   Sent Count: ${updatedCampaign.sent_count}`)
        console.log(`   Failed Count: ${updatedCampaign.failed_count}`)
        console.log(`   Total Cost: ${updatedCampaign.total_cost} KES`)
      }

    } else {
      console.log(`‚ö†Ô∏è  No notifications found for this campaign`)
    }

    // Step 5: Check for notifications that might be incorrectly linked
    console.log(`\nüìã Step 5: Checking for incorrectly linked notifications...`)
    
    const { data: allNotifications, error: allNotifError } = await supabase
      .from('sms_notifications')
      .select('*')
      .eq('partner_id', campaign.partner_id)
      .order('created_at', { ascending: false })
      .limit(20)

    if (allNotifError) {
      console.log(`‚ùå Error fetching all notifications:`, allNotifError)
    } else {
      console.log(`üì± Found ${allNotifications?.length || 0} total notifications for this partner`)
      
      // Find notifications that might be incorrectly linked to this campaign
      const incorrectlyLinked = allNotifications?.filter(notif => 
        notif.bulk_campaign_id === campaign.id && 
        notif.message_content !== campaign.message_content
      ) || []

      console.log(`üîç Found ${incorrectlyLinked.length} potentially incorrectly linked notifications`)
      
      if (incorrectlyLinked.length > 0) {
        console.log(`üìä Incorrectly Linked Notifications:`)
        incorrectlyLinked.forEach((notif, index) => {
          console.log(`\n   üì± Notification ${index + 1}:`)
          console.log(`      Phone: ${notif.recipient_phone}`)
          console.log(`      Status: ${notif.status}`)
          console.log(`      Message: ${notif.message_content?.substring(0, 50)}...`)
          console.log(`      Campaign Message: ${campaign.message_content?.substring(0, 50)}...`)
          console.log(`      Created: ${notif.created_at}`)
        })
        
        // Unlink incorrectly linked notifications
        console.log(`\nüîß Unlinking incorrectly linked notifications...`)
        
        const incorrectIds = incorrectlyLinked.map(n => n.id)
        
        const { data: unlinkedNotifications, error: unlinkError } = await supabase
          .from('sms_notifications')
          .update({
            bulk_campaign_id: null
          })
          .in('id', incorrectIds)
          .select()

        if (unlinkError) {
          console.log(`‚ùå Error unlinking notifications:`, unlinkError)
        } else {
          console.log(`‚úÖ Unlinked ${unlinkedNotifications?.length || 0} incorrectly linked notifications`)
        }
      }
    }

    // Step 6: Verify final statistics
    console.log(`\nüìã Step 6: Verifying final statistics...`)
    
    const { data: finalCampaign, error: finalError } = await supabase
      .from('sms_bulk_campaigns')
      .select(`
        *,
        partners:partner_id (
          id,
          name,
          short_code
        )
      `)
      .eq('id', campaign.id)
      .single()

    if (finalError) {
      console.log('‚ùå Error fetching final campaign:', finalError)
    } else {
      console.log('üìä Final Campaign Statistics:')
      console.log(`   Name: ${finalCampaign.campaign_name}`)
      console.log(`   Status: ${finalCampaign.status}`)
      console.log(`   Partner: ${finalCampaign.partners?.name}`)
      console.log(`   Recipients: ${finalCampaign.total_recipients}`)
      console.log(`   Delivered: ${finalCampaign.delivered_count}`)
      console.log(`   Sent: ${finalCampaign.sent_count}`)
      console.log(`   Failed: ${finalCampaign.failed_count}`)
      console.log(`   Cost: ${finalCampaign.total_cost} KES`)
      console.log(`   Sent At: ${finalCampaign.sent_at || 'Not sent'}`)
      
      // This should now show correctly as "2/2" in the UI
      console.log(`\nüéØ UI Display Should Now Show:`)
      console.log(`   Recipients: ${finalCampaign.delivered_count}/${finalCampaign.total_recipients}`)
    }

  } catch (error) {
    console.error('‚ùå Fix failed:', error.message)
  } finally {
    console.log('\nüéØ Recipient Statistics Fix Summary:')
    console.log('====================================')
    console.log('‚úÖ Campaign statistics analyzed')
    console.log('‚úÖ SMS notifications reviewed')
    console.log('‚úÖ Duplicate notifications identified')
    console.log('‚úÖ Campaign statistics corrected')
    console.log('‚úÖ Incorrectly linked notifications unlinked')
    console.log('‚úÖ Final statistics verified')
    console.log('')
    console.log('üîß What Was Fixed:')
    console.log('==================')
    console.log('‚úÖ Corrected recipient count display')
    console.log('‚úÖ Fixed delivered count to show unique recipients')
    console.log('‚úÖ Updated sent count to show unique recipients')
    console.log('‚úÖ Recalculated cost based on unique recipients')
    console.log('‚úÖ Unlinked notifications from wrong campaigns')
    console.log('')
    console.log('üí° The UI should now show "2/2" instead of "6/2"')
    console.log('üì± This represents 2 unique recipients out of 2 total recipients')
  }
}

fixRecipientStatistics()
