require('dotenv').config()
const https = require('https')
const http = require('http')
const crypto = require('crypto')

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https://')
    const client = isHttps ? https : http
    
    const req = client.request(url, {
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    }, (res) => {
      let data = ''
      res.on('data', chunk => data += chunk)
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data)
          resolve({ status: res.statusCode, data: jsonData })
        } catch (e) {
          resolve({ status: res.statusCode, data: data })
        }
      })
    })
    
    req.on('error', reject)
    
    if (options.body) {
      req.write(JSON.stringify(options.body))
    }
    
    req.end()
  })
}

// Function to generate hash (same as in the API)
function generateHash(secretKey, transType, transID, transTime, transAmount, businessShortCode, billRefNumber, mobile, name) {
  try {
    const hashString = secretKey + transType + transID + transTime + transAmount + businessShortCode + billRefNumber + mobile + name + "1"
    const sha256Hash = crypto.createHash('sha256').update(hashString, 'utf8').digest('hex')
    const base64Hash = Buffer.from(sha256Hash, 'hex').toString('base64')
    return base64Hash
  } catch (error) {
    console.error('Error generating hash:', error)
    return ''
  }
}

async function testGlobalNCBASystem() {
  console.log('üß™ Testing Global NCBA Paybill System')
  console.log('=====================================\n')

  try {
    // Test 1: Check system settings
    console.log('üìã Test 1: Checking system NCBA settings...')
    
    const settingsResponse = await makeRequest('http://localhost:3000/api/system/settings?category=ncba')
    
    if (settingsResponse.status !== 200) {
      console.log('‚ùå Failed to fetch system settings:', settingsResponse.data)
      return
    }

    const settings = settingsResponse.data.data
    console.log('‚úÖ System NCBA settings:')
    console.log(`   Business Short Code: ${settings.ncba_business_short_code?.value || 'Not set'}`)
    console.log(`   Notification Username: ${settings.ncba_notification_username?.value ? '‚úÖ Set' : '‚ùå Not set'}`)
    console.log(`   Notification Password: ${settings.ncba_notification_password?.value ? '‚úÖ Set' : '‚ùå Not set'}`)
    console.log(`   Notification Secret Key: ${settings.ncba_notification_secret_key?.value ? '‚úÖ Set' : '‚ùå Not set'}`)
    console.log(`   Account Number: ${settings.ncba_account_number?.value || 'Not set'}`)
    console.log(`   Account Reference Separator: ${settings.ncba_account_reference_separator?.value || 'Not set'}`)

    if (!settings.ncba_notification_username?.value || !settings.ncba_notification_password?.value || !settings.ncba_notification_secret_key?.value) {
      console.log('\n‚ùå System NCBA settings are incomplete.')
      console.log('   Please configure these system settings first:')
      console.log('   - ncba_notification_username')
      console.log('   - ncba_notification_password')
      console.log('   - ncba_notification_secret_key')
      return
    }

    // Test 2: Check if we have any partners
    console.log('\nüìã Test 2: Checking for active partners...')
    
    const partnerResponse = await makeRequest('http://localhost:3000/api/partners')
    
    if (partnerResponse.status !== 200) {
      console.log('‚ùå Failed to fetch partners:', partnerResponse.data)
      return
    }

    const partners = partnerResponse.data.data || []
    console.log(`‚úÖ Found ${partners.length} partners in database`)

    if (partners.length === 0) {
      console.log('‚ùå No partners found. Please create a partner first.')
      return
    }

    const testPartner = partners[0]
    console.log(`‚úÖ Using test partner: ${testPartner.name} (ID: ${testPartner.id})`)

    // Test 3: Check wallet before notification
    console.log('\nüìã Test 3: Checking wallet balance before notification...')
    
    const walletResponse = await makeRequest(`http://localhost:3000/api/wallet?partner_id=${testPartner.id}`)
    
    if (walletResponse.status === 200) {
      const currentBalance = walletResponse.data.data.balance || 0
      console.log(`‚úÖ Current wallet balance: KES ${currentBalance}`)
    }

    // Test 4: Simulate NCBA Paybill notification with global settings
    console.log('\nüìã Test 4: Simulating NCBA Paybill notification...')
    
    const testNotification = {
      TransType: "PAYBILL",
      TransID: `TEST${Date.now()}`,
      TransTime: new Date().toISOString().replace(/[-:.]/g, '').slice(0, 14),
      TransAmount: "500.00",
      BusinessShortCode: settings.ncba_business_short_code.value, // Use system setting
      BillRefNumber: `${settings.ncba_account_number.value}${settings.ncba_account_reference_separator.value}${testPartner.id}`, // 123456#<partner_id>
      Mobile: "254708374149",
      name: "TEST CUSTOMER",
      created_at: new Date().toISOString(),
      Username: settings.ncba_notification_username.value,
      Password: settings.ncba_notification_password.value
    }

    // Generate hash for the notification
    const hash = generateHash(
      settings.ncba_notification_secret_key.value,
      testNotification.TransType,
      testNotification.TransID,
      testNotification.TransTime,
      testNotification.TransAmount,
      testNotification.BusinessShortCode,
      testNotification.BillRefNumber,
      testNotification.Mobile,
      testNotification.name
    )

    testNotification.Hash = hash

    console.log('Sending test notification:', {
      ...testNotification,
      Hash: hash.substring(0, 20) + '...' // Truncate hash for display
    })

    const notificationResponse = await makeRequest('http://localhost:3000/api/ncba/paybill-notification', {
      method: 'POST',
      body: testNotification
    })

    if (notificationResponse.status !== 200) {
      console.log('‚ùå Notification failed:', notificationResponse.data)
      return
    }

    console.log('‚úÖ Notification processed successfully!')
    console.log(`   Response: ${notificationResponse.data.ResultDesc}`)

    // Test 5: Check wallet balance after notification
    console.log('\nüìã Test 5: Checking wallet balance after notification...')
    
    const walletAfterResponse = await makeRequest(`http://localhost:3000/api/wallet?partner_id=${testPartner.id}`)
    
    if (walletAfterResponse.status === 200) {
      const newBalance = walletAfterResponse.data.data.balance || 0
      console.log(`‚úÖ New wallet balance: KES ${newBalance}`)
    }

    // Test 6: Check C2B transactions
    console.log('\nüìã Test 6: Checking C2B transactions...')
    
    const c2bResponse = await makeRequest(`http://localhost:3000/api/c2b/transactions?partner_id=${testPartner.id}`)
    
    if (c2bResponse.status === 200) {
      const c2bData = c2bResponse.data
      console.log(`‚úÖ Found ${c2bData.data.length} C2B transactions`)
      
      if (c2bData.data.length > 0) {
        const latestTransaction = c2bData.data[0]
        console.log(`   Latest: ${latestTransaction.transaction_id} - KES ${latestTransaction.transaction_amount}`)
        console.log(`   Customer: ${latestTransaction.customer_name} (${latestTransaction.customer_phone})`)
        console.log(`   Account Ref: ${latestTransaction.bill_reference_number}`)
        console.log(`   Status: ${latestTransaction.status}`)
      }
    }

    console.log('\nüéâ Global NCBA Paybill System Test Complete!')
    console.log('============================================')
    console.log('‚úÖ Global NCBA system is working correctly')
    console.log('‚úÖ System settings are properly configured')
    console.log('‚úÖ Partner identification by account reference works')
    console.log('‚úÖ Wallet balances are being updated')
    console.log('‚úÖ C2B transactions are being recorded')
    console.log('‚úÖ Ready for production use')

  } catch (error) {
    console.error('‚ùå Test failed:', error.message)
  }
}

// Run the test
testGlobalNCBASystem()
